<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Imaginet version="2.0.0.0">
	<Unit name="Imaginet.Units.Math.Crop">
		<DisplayName>Crop</DisplayName>
		<DisplayPath>/Image Processing</DisplayPath>
		<Description>Crop image along height and width dimensions, preserving channels.</Description>

		<Parameters>
			<InputSocket name="input" pipe="data" />

			<Int32Option
			  name="start_height"
			  min="0"
			  ui="textbox"
			  text="Start Height"
			  description="Starting index for height dimension" />

			<Int32Option
			  name="count_height"
			  min="1"
			  ui="textbox"
			  text="Crop Height"
			  description="Number of rows to keep" />

			<Int32Option
			  name="start_width"
			  min="0"
			  ui="textbox"
			  text="Start Width"
			  description="Starting index for width dimension" />

			<Int32Option
			  name="count_width"
			  min="1"
			  ui="textbox"
			  text="Crop Width"
			  description="Number of columns to keep" />

			<!-- Precomputed values -->
			<Expression name="channels" value="input.shape.count == 2 ? 1 : input.shape.size(-3)" description="Number of channels" />
			<Expression name="index_offset" value="channels == 3 ? 1 : 0" description="Number of channels" />
			<Expression name="input_height" value="input.shape.size(1+index_offset)" />
			<Expression name="input_width" value="input.shape.size(0+index_offset)" />
			<OutputSocket name="output" pipe="data" type="input.type"
						  shape="input.shape.count == 2 ? System.Shape(count_height, count_width) : System.Shape(count_height, count_width, channels)" />
		</Parameters>

		<Contracts>
			<Assert test="start_height >= 0" error="Start height must be greater than 0" />
			<Assert test="count_height >= 1" error="Crop height must be greater than 0" />
			<Assert test="start_width >= 0" error="Start width must be positive" />
			<Assert test="count_width >= 1" error="Crop width must be positive" />
			<Assert test="input.shape.count >= 2" error="Input must be at least 2D (HxW or HxWxC)." />
			<Assert test="(start_height + count_height) &lt;= input.shape.size(1+index_offset)"
				   error="Height range exceeds input dimensions ({start_height + count_height} > {input.shape.size(1+index_offset)})." />
			<Assert test="(start_width + count_width) &lt;= input.shape.size(0+index_offset)"
				   error="Width range exceeds input dimensions ({start_width + count_width} > {input.shape.size(0+index_offset)})." />
		</Contracts>

		<Implementations>
			<Implementation language="C" fragment="crop.h:crop_f32"
							  call="crop_f32(input, output, start_width, count_width, start_height, count_height, input_width, input_height, channels)">
				<Conditional value="input.type == System.Float32" />
			</Implementation>
		</Implementations>
	</Unit>
</Imaginet>